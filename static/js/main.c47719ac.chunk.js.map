{"version":3,"sources":["components/Tab/Tab.jsx","components/Tabs/Tabs.jsx","App.js","index.js"],"names":["Tab","props","currentCity","onClick","city","isActiveClass","name","className","type","Tabs","cities","useState","setCurrentCity","map","key","colSpan","Math","round","temp","pressure","humidity","speed","deg","URL_API","getDataCity","a","fetch","then","response","json","App","isLoading","setIsLoading","isError","setIsError","data","setData","useEffect","Promise","all","citiesWeather","main","wind","catch","finally","length","disabled","ReactDOM","render","document","getElementById"],"mappings":"2TAGO,SAASA,EAAIC,GAAQ,IAClBC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,KACxBC,EAAgBH,IAAgBE,EAAKE,KAAO,0BAA4B,GAC9E,OACE,wBAAIC,UAAU,gBACZ,4BACEC,KAAK,SACLD,UAAW,iBAAoBF,EAC/BF,QAASA,GAERC,EAAKE,OCRP,SAASG,EAAKR,GAAQ,IACpBS,EAAUT,EAAVS,OADmB,EAEYC,mBAASD,EAAO,IAF5B,mBAEnBR,EAFmB,KAENU,EAFM,KAI1B,OACE,oCACE,wBAAIL,UAAU,gBACXG,EAAOG,KAAI,SAAAT,GAAI,OAAI,kBAAC,EAAD,CAAKU,IAAKV,EAAKE,KAAMH,QAAS,WAAOS,EAAeR,IAAQA,KAAMA,EAAMF,YAAaA,EAAYI,WAEvH,2BAAOC,UAAU,iBACf,+BACE,4BACE,wBAAIQ,QAAQ,KAAKb,EAAYI,QAIjC,+BACE,4BACE,2CACA,sCAAQU,KAAKC,MAA8B,KAAvBf,EAAYgB,KAAM,MAAU,KAAO,GAAvD,YAEF,4BACE,oDACA,sCAAQhB,EAAYiB,UAAY,GAAhC,UAEF,4BACE,wCACA,sCAAQjB,EAAYkB,UAAY,GAAhC,QAEF,4BACE,0CACA,sCAAQlB,EAAYmB,OAAS,GAA7B,gBAEF,4BACE,8CACA,sCAAQnB,EAAYoB,KAAO,GAA3B,cCpCZ,IAAMC,EAAU,4F,SAEDC,E,8EAAf,WAA2BpB,GAA3B,SAAAqB,EAAA,+EACSC,MAAM,GAAD,OAAIH,GAAJ,OAAcnB,IACvBuB,MAAK,SAAAC,GACJ,OAAOA,EAASC,WAHtB,4C,sBAwDeC,MAjDf,WAAgB,IAAD,EACqBnB,oBAAS,GAD9B,mBACNoB,EADM,KACKC,EADL,OAEiBrB,oBAAS,GAF1B,mBAENsB,EAFM,KAEGC,EAFH,OAGUvB,mBAAS,IAHnB,mBAGNwB,EAHM,KAGAC,EAHA,KAgCb,OA3BAC,qBAEA,WACEH,GAAW,GACXF,GAAa,GACbM,QAAQC,IAAI,CACVf,EAAY,UACZA,EAAY,QACZA,EAAY,cACXG,MAAM,SAAAjB,GACP,IAAM8B,EAAgB9B,EAAOG,KAAI,SAAAT,GAAS,IAC/BE,EAAoEF,EAApEE,KAD8B,EACsCF,EAA7DqC,KAAQvB,EADe,EACfA,KAAMC,EADS,EACTA,SAAUC,EADD,EACCA,SADD,EACsChB,EAAzBsC,KACpD,MAAO,CACLpC,OACAY,OACAC,WACAC,WACAC,MAPqC,EACqBA,MAO1DC,IARqC,EAC4BA,QAUrEc,EAAQI,MACPG,OAAM,WACPT,GAAW,MACVU,SAAQ,WAAQZ,GAAa,QAxBd,IA2BD,IAAhBG,EAAKU,OAEJ,oCACE,4BAAQC,SAAUf,GAAlB,QACA,2BAAIE,EAAU,4BAA8B,IAC5C,2BAAIF,EAAY,aAAe,KAKnC,yBAAKxB,UAAU,kBACb,wBAAIA,UAAU,cAAd,OACA,kBAAC,EAAD,CAAMG,OAAQyB,MCpDpBY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c47719ac.chunk.js","sourcesContent":["import React from 'react'\nimport './Tab.css'\n\nexport function Tab(props) {\n  const { currentCity, onClick, city} = props;\n  const isActiveClass = currentCity === city.name ? \" cities__button--active\" : \"\";\n  return (\n    <li className=\"cities__item\">\n      <button\n        type=\"button\"\n        className={\"cities__button\"  + isActiveClass}\n        onClick={onClick}\n      >\n        {city.name}\n      </button>\n    </li>\n  )\n}","import React, { useState } from 'react'\nimport './Tabs.css'\n\nimport { Tab } from '../Tab/Tab'\n\nexport function Tabs(props) {\n  const {cities} = props\n  const [currentCity, setCurrentCity] = useState(cities[0])\n\n  return (\n    <>\n      <ul className=\"cities__list\">\n        {cities.map(city => <Tab key={city.name} onClick={() => {setCurrentCity(city)}} city={city} currentCity={currentCity.name}/>)} \n      </ul>\n      <table className=\"cities__table\">\n        <thead>\n          <tr>\n            <th colSpan=\"2\">{currentCity.name}</th>\n            \n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Temperature</td>\n            <td>{`${Math.round((currentCity.temp- 273)*100)/100 || \"\"} °C`}</td>\n          </tr>\n          <tr>\n            <td>Atmospheric pressure</td>\n            <td>{`${currentCity.pressure || \"\"} hPa`}</td>\n          </tr>\n          <tr>\n            <td>Humidity</td>\n            <td>{`${currentCity.humidity || \"\"} %`}</td>\n          </tr>\n          <tr>\n            <td>Wind speed</td>\n            <td>{`${currentCity.speed || \"\"} meter/sec`}</td>\n          </tr>\n          <tr>\n            <td>Wind direction</td>\n            <td>{`${currentCity.deg || \"\"} °`}</td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Tabs } from \"./components/Tabs/Tabs\"\n\nconst URL_API = \"https://api.openweathermap.org/data/2.5/weather?appid=c2dcf8ffb5cdc3f8977bfd2ae7ea4738&q=\"\n\nasync function getDataCity(city) {\n  return fetch(`${URL_API}${city}`)\n    .then(response => {\n      return response.json()\n    })\n}\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [data, setData] =useState([]);\n\n  useEffect(loadData, [])\n\n  function loadData() {\n    setIsError(false)\n    setIsLoading(true)\n    Promise.all([\n      getDataCity(\"London\"),\n      getDataCity(\"Kyiv\"),\n      getDataCity(\"New York\")\n    ]).then (cities => {\n      const citiesWeather = cities.map(city => {\n        const {  name , main: { temp, pressure, humidity }, wind: { speed, deg } } = city\n        return {\n          name,\n          temp,\n          pressure,\n          humidity,\n          speed,\n          deg,\n        }\n      })\n      setData(citiesWeather);\n    }).catch(() => {\n      setIsError(true)\n    }).finally(() => { setIsLoading(false) })\n  }\n\n  if(data.length === 0) {\n    return (\n      <>\n        <button disabled={isLoading}>Load</button>\n        <p>{isError ? \"Error occurred. Try later\" : \"\"}</p>\n        <p>{isLoading ? \"Loading...\" : \"\"}</p>\n      </>\n    )\n  }\n  return (\n    <div className=\"app__container\">\n      <h1 className=\"app__title\">App</h1>\n      <Tabs cities={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}